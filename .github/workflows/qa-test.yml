name: QA Test on Pull Request

on:
  pull_request:
    branches: [main]

jobs:
  qa-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect project configuration
        id: detect
        shell: bash
        run: |
          detect_module_type() {
            if [ -f "package.json" ]; then
              # Verificar type: module explícito
              if grep -q '"type":\s*"module"' package.json; then
                echo "esm"
                return
              fi
              
              
              if find . -name "*.js" -type f -exec grep -l "^[[:space:]]*\(import\|export\)" {} \; | grep -q .; then
                echo "mixed"
                return
              fi
              
              echo "commonjs"
            else
              echo "unknown"
            fi
          }

          if [ -f "package.json" ]; then
            if grep -q '"@angular/core"' package.json; then
              echo "framework=angular" >> $GITHUB_OUTPUT
            elif grep -q '"react"' package.json; then
              echo "framework=react" >> $GITHUB_OUTPUT
            elif grep -q '"vue"' package.json; then
              echo "framework=vue" >> $GITHUB_OUTPUT
            elif grep -q '"next"' package.json; then
              echo "framework=next" >> $GITHUB_OUTPUT
            else
              echo "framework=javascript" >> $GITHUB_OUTPUT
            fi

            MODULE_TYPE=$(detect_module_type)
            echo "module_type=${MODULE_TYPE}" >> $GITHUB_OUTPUT
            
            if grep -q '"jest"' package.json; then
              echo "test_framework=jest" >> $GITHUB_OUTPUT
            elif grep -q '"vitest"' package.json; then
              echo "test_framework=vitest" >> $GITHUB_OUTPUT
            elif grep -q '"mocha"' package.json; then
              echo "test_framework=mocha" >> $GITHUB_OUTPUT
            elif grep -q '"karma"' package.json && grep -q '"jasmine"' package.json; then
              echo "test_framework=karma-jasmine" >> $GITHUB_OUTPUT
            else
              echo "test_framework=unknown" >> $GITHUB_OUTPUT
            fi
          elif [ -f "requirements.txt" ]; then
            echo "framework=python" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ]; then
            echo "framework=java" >> $GITHUB_OUTPUT
          else
            echo "framework=unknown" >> $GITHUB_OUTPUT
          fi

          if [ -f "tsconfig.json" ]; then
            echo "typescript=true" >> $GITHUB_OUTPUT
            # Detectar configuración de módulos en tsconfig.json
            if grep -q '"module":\s*"ESNext"' tsconfig.json || grep -q '"module":\s*"ES2020"' tsconfig.json; then
              echo "ts_module=esm" >> $GITHUB_OUTPUT
            else
              echo "ts_module=commonjs" >> $GITHUB_OUTPUT
            fi
          else
            echo "typescript=false" >> $GITHUB_OUTPUT
          fi

          if [ -f "yarn.lock" ]; then
            echo "package_manager=yarn" >> $GITHUB_OUTPUT
          elif [ -f "pnpm-lock.yaml" ]; then
            echo "package_manager=pnpm" >> $GITHUB_OUTPUT
          else
            echo "package_manager=npm" >> $GITHUB_OUTPUT
          fi

          if [ -f ".babelrc" ] || [ -f "babel.config.js" ] || [ -f ".babelrc.js" ]; then
            echo "uses_babel=true" >> $GITHUB_OUTPUT
          else
            echo "uses_babel=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: contains(fromJson('["angular", "react", "vue", "next", "javascript"]'), steps.detect.outputs.framework)
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: ${{ steps.detect.outputs.package_manager }}

      - name: Install package manager
        if: steps.detect.outputs.package_manager == 'pnpm'
        run: npm install -g pnpm

      - name: Install dependencies
        if: contains(fromJson('["angular", "react", "vue", "next", "javascript"]'), steps.detect.outputs.framework)
        shell: bash
        run: |
          if [ "${{ steps.detect.outputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ steps.detect.outputs.package_manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          else
            npm ci
          fi

      - name: Setup testing environment
        if: steps.detect.outputs.typescript == 'true' || steps.detect.outputs.framework == 'javascript'
        shell: bash
        run: |
          create_jest_config() {
            local module_type=$1
            local typescript=$2
            local config_file=$3

            if [ "$module_type" = "esm" ]; then
              echo '{
                "preset": "ts-jest/presets/default-esm",
                "extensionsToTreatAsEsm": [".ts", ".tsx", ".mts"],
                "moduleNameMapper": {
                  "^(\\.{1,2}/.*)\\.js$": "$1"
                },
                "transform": {
                  "^.+\\.[t]sx?$": ["ts-jest", {
                    "useESM": true
                  }]
                },
                "testEnvironment": "node",
                "testMatch": ["**/__tests__/**/*.[jt]s?(x)", "**/?(*.)+(spec|test).[jt]s?(x)"]
              }' > "$config_file"
            else
              echo '{
                "preset": "ts-jest",
                "testEnvironment": "node",
                "moduleFileExtensions": ["js", "jsx", "ts", "tsx", "json", "node"],
                "transform": {
                  "^.+\\.[t]sx?$": "ts-jest"
                },
                "testMatch": ["**/__tests__/**/*.[jt]s?(x)", "**/?(*.)+(spec|test).[jt]s?(x)"]
              }' > "$config_file"
            fi
          }

          case "${{ steps.detect.outputs.test_framework }}" in
            "jest")
              if [ "${{ steps.detect.outputs.module_type }}" = "esm" ]; then
                create_jest_config "esm" "${{ steps.detect.outputs.typescript }}" "jest.config.mjs"
              else
                create_jest_config "commonjs" "${{ steps.detect.outputs.typescript }}" "jest.config.js"
              fi
              ;;
            "vitest")
              echo '{
                "test": {
                  "globals": true,
                  "environment": "node",
                  "include": ["**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"]
                }
              }' > vitest.config.js
              ;;
            "mocha")
              echo '{
                "require": ["ts-node/register"],
                "extension": ["ts", "tsx"],
                "spec": "test/**/*.{js,jsx,ts,tsx}"
              }' > .mocharc.json
              ;;
          esac

      - name: Run tests
        shell: bash
        run: |
          case "${{ steps.detect.outputs.framework }}" in
            "angular")
              ng test --watch=false --browsers=ChromeHeadless --code-coverage
              ;;
            *)
              case "${{ steps.detect.outputs.test_framework }}" in
                "jest")
                  if [ "${{ steps.detect.outputs.module_type }}" = "esm" ]; then
                    node --experimental-vm-modules $(npm bin)/jest --coverage --watchAll=false
                  else
                    ${{ steps.detect.outputs.package_manager }} test -- --coverage --watchAll=false
                  fi
                  ;;
                "vitest")
                  ${{ steps.detect.outputs.package_manager }} exec vitest run --coverage
                  ;;
                "mocha")
                  ${{ steps.detect.outputs.package_manager }} test
                  ;;
                "karma-jasmine")
                  ${{ steps.detect.outputs.package_manager }} run test -- --no-watch --code-coverage
                  ;;
                *)
                  if [ -f "package.json" ] && grep -q '"test"' package.json; then
                    ${{ steps.detect.outputs.package_manager }} test
                  else
                    echo "No test configuration found. Skipping tests..."
                  fi
                  ;;
              esac
              ;;
          esac

      - name: Run linting
        shell: bash
        continue-on-error: true
        run: |
          if [ -f "package.json" ]; then
            if grep -q '"lint"' package.json; then
              ${{ steps.detect.outputs.package_manager }} run lint
            elif [ -f ".eslintrc" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
              ${{ steps.detect.outputs.package_manager }} exec eslint . --ext .js,.jsx,.ts,.tsx
            fi
          fi

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        continue-on-error: true
